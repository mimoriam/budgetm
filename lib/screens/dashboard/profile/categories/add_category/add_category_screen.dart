import 'package:budgetm/constants/appColors.dart';
import 'package:flutter/material.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:form_builder_validators/form_builder_validators.dart';
import 'package:hugeicons/hugeicons.dart';
import 'package:budgetm/services/firestore_service.dart';
import 'package:budgetm/models/category.dart';
import 'package:budgetm/widgets/pretty_bottom_sheet.dart';

class AddCategoryScreen extends StatefulWidget {
  final String? initialCategoryType;
  const AddCategoryScreen({super.key, this.initialCategoryType});

  @override
  State<AddCategoryScreen> createState() => _AddCategoryScreenState();
}

class _AddCategoryScreenState extends State<AddCategoryScreen> {
  final _formKey = GlobalKey<FormBuilderState>();
  late FirestoreService _firestoreService;
  bool _isSaving = false;
  String? _selectedType;

  @override
  void initState() {
    super.initState();
    _firestoreService = FirestoreService.instance;
    _selectedType = widget.initialCategoryType;
  }

  Future<String?> _showPrettySelectionBottomSheet({
    required String title,
    required List<String> items,
    required String? selectedItem,
  }) async {
    return await showModalBottomSheet<String>(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return PrettyBottomSheet<String>(
          title: title,
          items: items,
          selectedItem: selectedItem ?? items.first,
          getDisplayName: (item) => item,
        );
      },
    );
  }

  Future<void> _saveCategory() async {
    if (_formKey.currentState?.saveAndValidate() ?? false) {
      try {
        setState(() {
          _isSaving = true;
        });
        final formValue = _formKey.currentState!.value;
        final name = formValue['name'] as String;
        final type = formValue['type'] as String;
        
        // Get all categories of this type to determine the next display order
        final allCategories = await _firestoreService.getAllCategories();
        final categoriesOfType = allCategories.where((cat) => cat.type == type).toList();
        final nextDisplayOrder = categoriesOfType.isEmpty ? 0 : categoriesOfType.map((cat) => cat.displayOrder).reduce((a, b) => a > b ? a : b) + 1;
        
        // Create the category
        final category = Category(
          id: '', // Will be generated by Firestore
          name: name,
          type: type,
          displayOrder: nextDisplayOrder,
        );
        
        // Insert the category
        await _firestoreService.createCategory(category);
        
        // Show a success message
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Category added successfully')),
          );
          
          // Navigate back to the previous screen
          Navigator.of(context).pop(true); // Pass true to indicate success
        }
      } catch (e) {
        print('Error saving category: $e');
        // Show an error message
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to add category: $e')),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSaving = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        backgroundColor: AppColors.scaffoldBackground,
        body: Column(
          children: [
            _buildCustomAppBar(context),
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(
                  horizontal: 18.0,
                  vertical: 24.0,
                ),
                child: FormBuilder(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildFormSection(
                        context,
                        'Name',
                        FormBuilderTextField(
                          name: 'name',
                          decoration: _inputDecoration(hintText: 'Enter category name'),
                          validator: FormBuilderValidators.required(),
                        ),
                      ),
                      const SizedBox(height: 16),
                      _buildFormSection(
                        context,
                        'Type',
                        FormBuilderField<String>(
                          name: 'type',
                          initialValue: _selectedType,
                          validator: FormBuilderValidators.required(
                            errorText: 'Please select a type',
                          ),
                          builder: (FormFieldState<String?> field) {
                            return GestureDetector(
                              onTap: () async {
                                final result = await _showPrettySelectionBottomSheet(
                                  title: 'Select Type',
                                  items: const ['Income', 'Expense'],
                                  selectedItem: _selectedType != null
                                      ? (_selectedType == 'income' ? 'Income' : 'Expense')
                                      : null,
                                );

                                if (result != null) {
                                  final typeValue = result == 'Income' ? 'income' : 'expense';
                                  setState(() {
                                    _selectedType = typeValue;
                                  });
                                  field.didChange(typeValue);
                                }
                              },
                              child: Container(
                                padding: const EdgeInsets.symmetric(
                                  vertical: 14.0,
                                  horizontal: 16.0,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(16.0),
                                  border: Border.all(
                                    color: field.hasError
                                        ? AppColors.errorColor
                                        : Colors.grey.shade300,
                                    width: field.hasError ? 1.5 : 1.0,
                                  ),
                                ),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      _selectedType != null
                                          ? (_selectedType == 'income' ? 'Income' : 'Expense')
                                          : 'Select type',
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _selectedType != null
                                            ? AppColors.primaryTextColorLight
                                            : AppColors.lightGreyBackground,
                                      ),
                                    ),
                                    Icon(
                                      Icons.arrow_drop_down,
                                      color: Colors.grey.shade600,
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                      const SizedBox(height: 16),
                      _buildFormSection(
                        context,
                        'Notes',
                        FormBuilderTextField(
                          name: 'notes',
                          initialValue: "Hi there, I'm designing this app.....",
                          decoration: _inputDecoration(hintText: 'Notes'),
                          maxLines: 3,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            _buildBottomButtons(context),
          ],
        ),
      ),
    );
  }

  PreferredSizeWidget _buildCustomAppBar(BuildContext context) {
    return PreferredSize(
      preferredSize: const Size.fromHeight(100),
      child: Container(
        padding: const EdgeInsets.only(top: 12, bottom: 12),
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [AppColors.gradientStart, AppColors.gradientEnd2],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: const BorderRadius.only(
            bottomLeft: Radius.circular(30),
            bottomRight: Radius.circular(30),
          ),
          border: Border.all(color: Colors.grey.shade300, width: 1.0),
        ),
        child: SafeArea(
          bottom: false,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 14.0),
            child: Row(
              children: [
                GestureDetector(
                  onTap: () => Navigator.of(context).pop(),
                  child: Container(
                    width: 36,
                    height: 36,
                    decoration: const BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: LinearGradient(
                        colors: [
                          AppColors.gradientStart,
                          AppColors.gradientEnd,
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                    ),
                    child: const HugeIcon(
                      icon: HugeIcons.strokeRoundedArrowLeft01,
                      color: Colors.white,
                      size: 14,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'Edit / Add Category',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildFormSection(BuildContext context, String title, Widget field) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: AppColors.secondaryTextColorLight,
            fontWeight: FontWeight.w600,
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 8),
        field,
      ],
    );
  }

  InputDecoration _inputDecoration({String? hintText}) {
    return InputDecoration(
      hintText: hintText,
      hintStyle: const TextStyle(
        fontSize: 14,
        color: AppColors.lightGreyBackground,
      ),
      filled: true,
      fillColor: Colors.white,
      contentPadding: const EdgeInsets.symmetric(
        vertical: 14.0,
        horizontal: 16.0,
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16.0),
        borderSide: BorderSide(color: Colors.grey.shade300),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16.0),
        borderSide: BorderSide(
          color: Theme.of(context).primaryColor,
          width: 1.5,
        ),
      ),
    );
  }

  Widget _buildBottomButtons(BuildContext context) {
    return Container(
      padding: const EdgeInsets.fromLTRB(24, 20, 24, 34),
      color: AppColors.scaffoldBackground,
      child: Row(
        children: [
          Expanded(
            child: OutlinedButton(
              onPressed: () => Navigator.of(context).pop(),
              style: OutlinedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30.0),
                ),
                side: const BorderSide(color: Colors.black, width: 1.5),
              ),
              child: Text(
                'Cancel',
                style: Theme.of(context).textTheme.labelLarge?.copyWith(
                  color: Colors.black,
                  fontSize: 16,
                ),
              ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: ElevatedButton(
              onPressed: _isSaving ? null : _saveCategory,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.gradientEnd,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30.0),
                ),
              ),
              child: _isSaving
                  ? SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2.0,
                      ),
                    )
                  : Text(
                      'Add',
                      style: Theme.of(context).textTheme.labelLarge?.copyWith(
                        color: Colors.white,
                        fontSize: 16,
                      ),
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
